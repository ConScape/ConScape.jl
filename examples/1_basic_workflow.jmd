
```julia
using ConScape
using Plots
```

# Step 1: data import and Grid creation

```julia
datadir = joinpath(dirname(pathof(ConScape)), "..", "data")
```

```julia
# TODO remove `replace_missing` and use missingval=NaN in the next Rasters.jl breaking release
mov_prob = replace_missing(Raster(joinpath(datadir, "mov_prob_1000.asc")), NaN)
hab_qual = replace_missing(Raster(joinpath(datadir, "hab_qual_1000.asc")), NaN)
```

```julia
# hack for the sensitivity:
non_matches = findall(xor.(isnan.(mov_prob), isnan.(hab_qual)))
mov_prob[non_matches] .= 1e-20
hab_qual[non_matches] .= 1e-20;
```

```julia
delete!(meta_p, "nodata_value")
delete!(meta_q, "nodata_value")
```

```julia
meta_p==meta_q
```

```julia
g = ConScape.Grid(size(mov_prob)...,
                  affinities=ConScape.graph_matrix_from_raster(mov_prob),
                  qualities=hab_qual,
                  costs=ConScape.MinusLog(), )
```

```julia
plot(ConScape.outdegrees(g); title="Permeabilty")
# savefig("figure_grid_outdeg.png")
```

```julia
heatmap(g.source_qualities; title="Qualities")
# savefig("figure_grid_qualities.png")
```

```julia
g.source_qualities
```

```julia
g.target_qualities
```

```julia
g.affinities
```

```julia
(g.nrows, g.ncols, g.nrows * g.ncols)
```

# Step 2: Habitat creation

```julia
h = ConScape.GridRSP(g, θ=1.0);
```

show distance:

```julia
tmp = zeros(5345)
tmp[4300] = 1
plot(Raster(tmp, g), title="Target (or is it Source?) Pixel")
```

```julia
dists = ConScape.expected_cost(h);
```

```julia
plot(Raster(dists[:,4300], g), title="RSP Expected Cost Distance")
```

```julia
plot(Raster(dists[:,4300], g), title="RSP Expected Cost Distance")
# savefig("figure_ECDistance.png")
```

```julia
plot(Raster(map(x -> exp(-x/75), dists[:, 4300]), g), title="Proximity")
```

# Step 3: Amount of Connected Habitat

```julia
func = ConScape.connected_habitat(h, distance_transformation=x -> exp(-x/75));
```

```julia
heatmap(func; title="Connected Habitat")
```

```julia
heatmap(func; title="Connected Habitat")
# savefig("figure_ConnectedHabitat.png")
```

```julia
sum(t -> isfinite(t) ? t : 0.0, func)
```

# Step 4: Movement Flow

## quality weighted

```julia
plot(ConScape.betweenness_qweighted(h); title="Quality-weighted Movement Flow")
```

```julia
plot(ConScape.betweenness_qweighted(h); title="Quality-weighted Movement Flow")
# savefig("figure_Qweighted_flow.png")
```

Effect of theta:

```julia
tmp = zeros(dims(g))
#tmp[42,58] = 1
#tmp[66, 90] = 1
tmp[60,70] = 1
tmp[50, 105] = 1
g_tmp = ConScape.Grid(size(mov_prob)...,
                      affinities=ConScape.graph_matrix_from_raster(mov_prob),
                      qualities=tmp,
                      costs=ConScape.MinusLog());
plot(g_tmp.source_qualities)
```

```julia
thetas = (2.5, 1.0, 0.5, 0.1, 0.01, 0.001)
betw_rasters = map(thetas) do θ
    h_tmp = ConScape.GridRSP(g_tmp; θ);
    ConScape.betweenness_qweighted(h_tmp)
end
betw = RasterStack(betw_rasters; name=map(θ -> "theta=$θ", thetas))
```

```julia
plot(betw; xlim=(60, 120), ylim=(20, 80), legend=:none,
    titlefont=font(10), xaxis=false, yaxis=false, aspect_ratio=:equal, grid=false
)
# savefig("output_figures/figure_thetas.png")
```

## Proximity weighted

```julia
plot(ConScape.betweenness_kweighted(h, distance_transformation=x -> exp(-x/75)); 
    title="Proximity-weighted Movement Flow"
)
```

```julia
plot(ConScape.betweenness_kweighted(h, distance_transformation=x -> exp(-x/75)); 
    title="Proximity-weighted Movement Flow"
)
# savefig("output_figures/figure_Pweighted_flow.png")
```

# Step 5: Sensitivity analysis

## Brute force criticality

We need a smaller (i.e. lower resolution) landscape for computational convenience:

```julia
mov_prob_2000 = replace_missing(Raster(joinpath(datadir, "mov_prob_2000.asc")), NaN)
hab_qual_2000 = replace_missing(Raster(joinpath(datadir, "hab_qual_2000.asc")), NaN)

# hack for the sensitivity:
hab_qual_2000[(mov_prob_2000 .> 0) .== isnan.(hab_qual_2000)] .= 1e-20;

g_2000 = ConScape.Grid(size(mov_prob_2000)...,
                      affinities=ConScape.graph_matrix_from_raster(mov_prob_2000),
                      qualities=hab_qual_2000,
                      costs=ConScape.MinusLog())
h_2000 = ConScape.GridRSP(g_2000, θ=0.1);
```

```julia
# Commented out since it's too expensive to run during CI
# crit = ConScape.criticality(h_2000, distance_transformation=x -> exp(-x/75))
```

```julia
# ConScape.heatmap(crit, yflip=true, title="criticality")
#savefig("output_figures/criticality.png")
```
