
```julia
using ConScape
using Plots
```

# Step 1: data import and Grid creation

```julia
datadir = joinpath(dirname(pathof(ConScape)), "..", "data")
```

```julia
mov_prob, meta_p = ConScape.readasc(joinpath(datadir, "mov_prob_1000.asc"))
hab_qual, meta_q = ConScape.readasc(joinpath(datadir, "hab_qual_1000.asc"))
```

```julia
# hack for the sensitivity:
non_matches = findall(xor.(isnan.(mov_prob), isnan.(hab_qual)))
mov_prob[non_matches] .= 1e-20
hab_qual[non_matches] .= 1e-20;
```

```julia
delete!(meta_p, "nodata_value")
delete!(meta_q, "nodata_value")
```

```julia
meta_p==meta_q
```

```julia
g = ConScape.Grid(
  size(mov_prob)...,
  affinities=ConScape.graph_matrix_from_raster(mov_prob),
  qualities=hab_qual,
  costs=ConScape.MinusLog()
)

```

```julia
ConScape.plot_outdegrees(g, title="Permeabilty")
# savefig("figure_grid_outdeg.png")
```

```julia
ConScape.heatmap(g.source_qualities, yflip=true, title="Qualities")
# savefig("figure_grid_qualities.png")
```

```julia
g.source_qualities
```

```julia
g.target_qualities
```

```julia
g.affinities
g.affinities[1:100, 1:100]

```

```julia
(g.nrows, g.ncols, g.nrows*g.ncols)
g.costmatrix
```

# Step 2: Habitat creation

```julia
using ProfileView
using BenchmarkTools

_, targetnodes = idx_and_nodes = ConScape._targetidx_and_nodes(g)

Z = Matrix{Float64}(undef, size(g.costmatrix, 1), length(idx_and_nodes[1]))

B = Matrix(sparse(targetnodes,
  1:length(targetnodes),
  1.0,
  size(g.costmatrix, 1),
  length(targetnodes))
)
Z = LinearAlgebra.copy_similar(B, Float64)

opt = ConScape.GridRSPoptimised(g; θ=1.0, idx_and_nodes, Z, B)
orig = ConScape.GridRSPoriginal(g; θ=1.0)
orig.Z .- opt.Z

Pref = ConScape._Pref(g.affinities)
W = ConScape._W(Pref, θ, g.costmatrix)
A = SparseArrays.I - W
F = lu(A)

@allocated h = ConScape.GridRSPoptimised(g; θ=1.0, idx_and_nodes, Z, F)
@allocated h = ConScape.GridRSPoptimised(g; θ=1.0)
@allocated h = ConScape.GridRSPoriginal(g; θ=1.0)
@b ConScape.GridRSPoptimised(g; θ=1.0, idx_and_nodes, Z, F)
@b ConScape.GridRSPoptimised(g; θ=1.0)
@b ConScape.GridRSPoriginal(g; θ=1.0)

@profview ConScape.GridRSPoptimised(g; θ=1.0, idx_and_nodes, Z, F)
@profview h = ConScape.GridRSPoriginal(g; θ=1.0)
h = ConScape.GridRSPoptimised(g; θ=1.0)
grsp = h
h
L = log.(h.Z)
using GLMakie
fig = Figure()
a1 = Axis(fig[1, 1])
a2 = Axis(fig[1, 2])
A1 = broadcast(collect(A)) do x
    isapprox(x, 0) ? NaN : x
end
Z1 = broadcast(h.Z) do x
    isapprox(x, 0.0; atol=1e-5) ? NaN : x
end
p1 = Makie.heatmap!(a1, A1; colormap=:viridis)
p2 = Makie.heatmap!(a2, Z1; colormap=:viridis)
Makie.Colorbar(fig[1, 1, Right()], p1)
Makie.Colorbar(fig[1, 2, Right()], p2)
linkaxes!(a1, a2)

```

show distance:

```julia
tmp = zeros(5345)
tmp[4300] = 1
ConScape.plot_values(g, tmp, title="Target (or is it Source?) Pixel")
```

```julia
dists = ConScape.expected_cost(h);
```

```julia
ConScape.plot_values(g, dists[:, 4300], title="RSP Expected Cost Distance")
```

```julia
ConScape.plot_values(g, dists[:, 4300], title="RSP Expected Cost Distance")
# savefig("figure_ECDistance.png")
```

```julia
ConScape.plot_values(g, map!(x -> exp(-x/75),dists[:,4300],dists[:,4300]), title="Proximity")
```

# Step 3: Amount of Connected Habitat

```julia
func = ConScape.connected_habitat(h, distance_transformation=x -> exp(-x/75));
```

```julia
ConScape.heatmap(Array(func), yflip=true, title="Connected Habitat")
```

```julia
ConScape.heatmap(Array(func), yflip=true, title="Connected Habitat")
# savefig("figure_ConnectedHabitat.png")
```

```julia
sum(t -> isfinite(t) ? t : 0.0, func)
```

# Step 4: Movement Flow

## quality weighted

```julia
ConScape.heatmap(ConScape.betweenness_qweighted(h), yflip=true, title="Quality-weighted Movement Flow")
```

```julia
ConScape.heatmap(ConScape.betweenness_qweighted(h), yflip=true, title="Quality-weighted Movement Flow")
# savefig("figure_Qweighted_flow.png")
```

Effect of theta:

```julia
tmp = zeros(g.nrows, g.ncols)
#tmp[42,58] = 1
#tmp[66, 90] = 1
tmp[60,70] = 1
tmp[50, 105] = 1
g_tmp = ConScape.Grid(size(mov_prob)...,
                      affinities=ConScape.graph_matrix_from_raster(mov_prob),
                      qualities=tmp,
                      costs=ConScape.MinusLog());
ConScape.heatmap(g_tmp.source_qualities, yflip=true)
```

```julia
thetas = (2.5, 1.0, 0.5, 0.1, 0.01, 0.001)
betw = [copy(mov_prob), copy(mov_prob), copy(mov_prob), copy(mov_prob), copy(mov_prob), copy(mov_prob)]

for i in 1:length(thetas)
    h_tmp = ConScape.GridRSP(g_tmp, θ=thetas[i]);
    betw[i] = ConScape.betweenness_qweighted(h_tmp)
end
```

```julia
using Plots
```

```julia
b1 =ConScape.heatmap(betw[1], yflip=true, legend = :none, xlim=(60,120), ylim=(20,80), title="theta=2.5",
    titlefont = font(10), xaxis=false, yaxis=false, aspect_ratio=:equal, grid=false)
b2 =ConScape.heatmap(betw[2], yflip=true, legend = :none, xlim=(60,120), ylim=(20,80), title="theta=1.0",
    titlefont = font(10), xaxis=false, yaxis=false, aspect_ratio=:equal, grid=false)
b3 =ConScape.heatmap(betw[3], yflip=true, legend = :none, xlim=(60,120), ylim=(20,80), title="theta=0.5",
    titlefont = font(10), xaxis=false, yaxis=false, aspect_ratio=:equal, grid=false)
b4 =ConScape.heatmap(betw[4], yflip=true, legend = :none, xlim=(60,120), ylim=(20,80), title="theta=0.1",
    titlefont = font(10), xaxis=false, yaxis=false, aspect_ratio=:equal, grid=false)
b5 =ConScape.heatmap(betw[5], yflip=true, legend = :none, xlim=(60,120), ylim=(20,80), title="theta=0.01",
    titlefont = font(10), xaxis=false, yaxis=false, aspect_ratio=:equal, grid=false)
b6 =ConScape.heatmap(betw[6], yflip=true, legend = :none, xlim=(60,120), ylim=(20,80), title="theta=0.001",
    titlefont = font(10), xaxis=false, yaxis=false, aspect_ratio=:equal, grid=false)
plot(b1,b2,b3,b4,b5,b6, layout = (2,3), size = (2*200, 3*100), dpi=150)
```

```julia
b1 =ConScape.heatmap(betw[1], yflip=true, legend = :none, xlim=(60,120), ylim=(20,80), title="theta=2.5",
    titlefont = font(10), xaxis=false, yaxis=false, aspect_ratio=:equal, grid=false)
b2 =ConScape.heatmap(betw[2], yflip=true, legend = :none, xlim=(60,120), ylim=(20,80), title="theta=1.0",
    titlefont = font(10), xaxis=false, yaxis=false, aspect_ratio=:equal, grid=false)
b3 =ConScape.heatmap(betw[3], yflip=true, legend = :none, xlim=(60,120), ylim=(20,80), title="theta=0.5",
    titlefont = font(10), xaxis=false, yaxis=false, aspect_ratio=:equal, grid=false)
b4 =ConScape.heatmap(betw[4], yflip=true, legend = :none, xlim=(60,120), ylim=(20,80), title="theta=0.1",
    titlefont = font(10), xaxis=false, yaxis=false, aspect_ratio=:equal, grid=false)
b5 =ConScape.heatmap(betw[5], yflip=true, legend = :none, xlim=(60,120), ylim=(20,80), title="theta=0.01",
    titlefont = font(10), xaxis=false, yaxis=false, aspect_ratio=:equal, grid=false)
b6 =ConScape.heatmap(betw[6], yflip=true, legend = :none, xlim=(60,120), ylim=(20,80), title="theta=0.001",
    titlefont = font(10), xaxis=false, yaxis=false, aspect_ratio=:equal, grid=false)
plot(b1,b2,b3,b4,b5,b6, layout = (2,3), size = (2*200, 3*100), dpi=150)
# savefig("output_figures/figure_thetas.png")
```

## Proximity weighted

```julia
ConScape.heatmap(ConScape.betweenness_kweighted(h, distance_transformation=x -> exp(-x/75)), yflip=true, title="Proximity-weighted Movement Flow")
```

```julia
ConScape.heatmap(ConScape.betweenness_kweighted(h, distance_transformation=x -> exp(-x/75)), yflip=true, title="Proximity-weighted Movement Flow")
# savefig("output_figures/figure_Pweighted_flow.png")
```

# Step 5: Sensitivity analysis

## Brute force criticality

We need a smaller (i.e. lower resolution) landscape for computational convenience:

```julia
mov_prob_2000, meta_p = ConScape.readasc(joinpath(datadir, "mov_prob_2000.asc"))
hab_qual_2000, meta_q = ConScape.readasc(joinpath(datadir, "hab_qual_2000.asc"))

# hack for the sensitivity:
hab_qual_2000[(mov_prob_2000.>0) .== isnan.(hab_qual_2000)] .= 1e-20;

g_2000 = ConScape.Grid(size(mov_prob_2000)...,
                      affinities=ConScape.graph_matrix_from_raster(mov_prob_2000),
                      qualities=hab_qual_2000,
                      costs=ConScape.MinusLog())
h_2000 = ConScape.GridRSP(g_2000, θ=0.1);
```

```julia
# Commented out since it's too expensive to run during CI
# crit = ConScape.criticality(h_2000, distance_transformation=x -> exp(-x/75))
```

```julia
# ConScape.heatmap(crit, yflip=true, title="criticality")
#savefig("output_figures/criticality.png")
```
