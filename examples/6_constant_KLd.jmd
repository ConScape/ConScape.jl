
```julia
using ConScape
using Optim
```

# Data import and GridRSP creation

```julia
datadir = joinpath(dirname(pathof(ConScape)), "..", "data")
```

```julia
mov_prob, meta_p = ConScape.readasc(joinpath(datadir, "mov_prob_1000.asc"))
hab_qual, meta_q = ConScape.readasc(joinpath(datadir, "hab_qual_1000.asc"))
```

```julia
non_matches = findall(xor.(isnan.(mov_prob), isnan.(hab_qual)))
mov_prob[non_matches] .= 1e-20
hab_qual[non_matches] .= 1e-20;
```

```julia
g = ConScape.Grid(size(mov_prob)...,
    affinities=ConScape.graph_matrix_from_raster(mov_prob),
    qualities=hab_qual,
    costs=ConScape.MinusLog())
```

```julia
h = ConScape.GridRSP(g, θ=1.0);
```

# Set fixed KL-divergence

```julia
maxkld = ConScape.mean_lc_kl_divergence(h);
maxkld
```

```julia
target_mean_D_KL = 0.5*maxkld
target_mean_D_KL
```

```julia
function mean_D_KL_difference(θ, G, target_mean_D_KL)
    mean_D_KL = ConScape.mean_kl_divergence(ConScape.GridRSP(G; θ=θ))
    return (mean_D_KL - target_mean_D_KL)^2
end
```

```julia
r = optimize(_θ -> mean_D_KL_difference(_θ, g, target_mean_D_KL), 0.0, 3.0; iterations=20)
```

```julia
sqrt(r.minimum)/target_mean_D_KL
```

```julia
new_theta = r.minimizer
new_theta
```

```julia
h = ConScape.GridRSP(g, θ=new_theta);
```

```julia
ConScape.mean_kl_divergence(h)
```

```julia
target_mean_D_KL
```

# Corridor example with constant KLd

```julia
nrows, ncols = 21, 41

g = ConScape.perm_wall_sim(nrows, ncols;
    corridorwidths=(3,),
    corridorpositions=(0.5,),
    impossible_affinity=0.,
    # Qualities decrease by row
    qualities=copy(reshape(collect(nrows*ncols:-1:1), ncols, nrows)'))


θ = 10.0
```

```julia
h = ConScape.GridRSP(g, θ=θ);
```

```julia
maxkld = ConScape.mean_lc_kl_divergence(h);
maxkld
```

```julia
100*ConScape.mean_kl_divergence(h)/maxkld
```

```julia
dist = ConScape.expected_cost(h);
```

```julia
target_node = Int(ceil((ncols-1)/2 - 3)*nrows + ceil((nrows+1)/2))

ConScape.plot_values(g, dist[:,target_node])
```

```julia
target_kld = ConScape.mean_kl_divergence(h)
```

```julia
g2 = ConScape.perm_wall_sim(nrows, ncols;
    corridorwidths=(7,),
    corridorpositions=(0.5,),
    impossible_affinity=0.,
    # Qualities decrease by row
    qualities=copy(reshape(collect(nrows*ncols:-1:1), ncols, nrows)'))
```

```julia
h2 = ConScape.GridRSP(g2, θ=θ);
```

```julia
dist2 = ConScape.expected_cost(h2);
```

```julia
ConScape.mean_kl_divergence(h2)
```

```julia
target_kld
```

```julia
r = optimize(_θ -> mean_D_KL_difference(_θ, g2, target_kld), 0.0, 3.0;iterations=20)
```

```julia
sqrt(r.minimum)/target_kld
```

```julia
new_theta = r.minimizer
new_theta
```

```julia
h3 = ConScape.GridRSP(g2, θ=new_theta);
```

```julia
dist3 = ConScape.expected_cost(h3);
```

```julia
using Plots
values_orig = ConScape.plot_values(g, map(t -> exp(-t/0.5), dist[:,target_node]))
Plots.contour(values_orig,fill=true,levels=10, c=:plasma)
```

```julia
values_wide = ConScape.plot_values(g2, map(t -> exp(-t/0.5), dist2[:,target_node]))
Plots.contour(values_wide,fill=true,levels=10, c=:plasma)
```

```julia
values_consKL = ConScape.plot_values(g2, map(t -> exp(-t/0.5), dist3[:,target_node]))
Plots.contour(values_consKL,fill=true,levels=10, c=:plasma)
```
