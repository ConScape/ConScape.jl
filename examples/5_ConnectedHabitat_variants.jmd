
```julia
using ConScape, Rasters, ArchGDAL, Plots
```

# Data import and GridRSP creation

```julia
datadir = joinpath(dirname(pathof(ConScape)), "..", "data")
```

```julia
mov_prob = replace_missing(Raster(joinpath(datadir, "mov_prob_1000.asc")), NaN)
hab_qual = replace_missing(Raster(joinpath(datadir, "hab_qual_1000.asc")), NaN);
```

```julia
non_matches = findall(xor.(isnan.(mov_prob), isnan.(hab_qual)))
mov_prob[non_matches] .= 1e-20
hab_qual[non_matches] .= 1e-20;
```

```julia
g = ConScape.Grid(size(mov_prob)...,
    affinities=ConScape.graph_matrix_from_raster(mov_prob),
    qualities=hab_qual,
    costs=ConScape.MinusLog());
```

```julia
h = ConScape.GridRSP(g, θ=0.001);
```

# Amount of Connected GridRSP

## Summed Expected Cost

```julia
func = ConScape.connected_habitat(h, distance_transformation=x -> exp(-x / 2000));
```

```julia
plot(func)
```

```julia
sum(t -> isnan(t) ? 0.0 : t, func)
```

```julia
targetidx, targetnodes = ConScape._targetidx_and_nodes(h.g)
qˢ = [h.g.source_qualities[i] for i in h.g.id_to_grid_coordinate_list]
qᵗ = [h.g.target_qualities[i] for i in targetidx]
```

```julia
similarities = map(t -> iszero(t) ? t : exp(-t / 2000), ConScape.expected_cost(h));
```

```julia
Raster(similarities[4300, :], g) |> plot
```

```julia
func1 = qˢ .* similarities * qᵗ

@time sum(func1)
```

```julia
sum(t -> isnan(t) ? 0.0 : t, func)
```

```julia
Raster(func1, g) |> plot
```

```julia
landscape = qˢ .* similarities .* qᵗ'
```

```julia
@time sum(func1)
```

## Eigenvalue Expected Cost

```julia
@time vˡ, λ, vʳ = ConScape.eigmax(h, connectivity_function=ConScape.expected_cost, distance_transformation=t -> iszero(t) ? t : exp(-t/2000))
λ
```

```julia
Raster(real.(vʳ), g) |> plot
```

```julia
Raster(abs.(real.(vˡ)), g) |> plot
```

```julia
plot(func1, real.(vʳ); seriestype=:scatter, legend=false, xlabel="sum", ylabel="eigenvector")
```

## Survival

```julia
similarities = h.Z;
```

```julia
Raster(similarities[4300, :], g) |> plot
```

```julia
func3 = qˢ .* similarities * qᵗ

@time sum(func3)
```

```julia
Raster(func3, g) |> plot
```

```julia
plot(func1, func3; seriestype=:scatter, legend=false, xlabel="sum", ylabel="eigenvector")
```

## Probability of Connectivity

```julia
lcps = ConScape.least_cost_distance(g)
Raster(lcps[4300, :], g) |> plot
```

```julia
similarities = map(t -> iszero(t) ? t : exp(-t/2.5), lcps);
```

```julia
Raster(similarities[4300, :], g) |> plot
```

```julia
pc = qˢ .* similarities * qᵗ

@time sum(pc)
```

```julia
Raster(pc, g) |> plot
```
